#!/usr/bin/python3
#
# kstest-runner - LMC-like program that only does what's necessary for running
# kickstart-based tests in anaconda
#
# Copyright (C) 2011-2015  Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Author(s): Brian C. Lane <bcl@redhat.com>
#            Chris Lumens <clumens@redhat.com>

import os
import sys
import argparse

from launcher.lib.virtual_controller import VirtualManager
from launcher.lib.configuration import VirtualConfiguration


def create_parser():
    parser = argparse.ArgumentParser(description="Run anaconda's kickstart-based tests",
                                     fromfile_prefix_chars="@")

    parser.add_argument("--iso", type=os.path.abspath,
                        help="Anaconda installation .iso path to use for virt-install")
    parser.add_argument("--ks", action="append", type=os.path.abspath, default=[],
                        help="Kickstart file defining the install.")
    parser.add_argument("--disk", action="append", type=os.path.abspath, dest="disk_paths",
                        default=[], help="Pre-existing disk image to use for destination.")
    parser.add_argument("--nic", action="append", default=[], dest="nics",
                        help="Network devices to be used.")

    parser.add_argument("--proxy",
                        help="proxy URL to use for the install")
    parser.add_argument("--location", default=None, type=os.path.abspath,
                        help="location of iso directory tree with initrd.img "
                             "and vmlinuz. Used to run virt-install with a "
                             "newer initrd than the iso.")
    parser.add_argument("--boot", default=None, type=str,
                        help="alternative boot image, eg. ipxe.lkrn for ibft")

    parser.add_argument("--logfile", default="./livemedia.log",
                        type=os.path.abspath,
                        help="Path to logfile")
    parser.add_argument("--tmp", default="/var/tmp", type=os.path.abspath,
                        help="Top level temporary directory")

    image_group = parser.add_argument_group("disk/fs image arguments")
    image_group.add_argument("--keep-image", action="store_true",
                             help="Keep raw disk image after .iso creation")

    # Group of arguments to pass to virt-install
    virt_group = parser.add_argument_group("virt-install arguments")
    virt_group.add_argument("--ram", metavar="MEMORY", type=int, default=2048,
                            help="Memory to allocate for installer in megabytes.")
    virt_group.add_argument("--vnc",
                            help="Passed to --graphics command")
    virt_group.add_argument("--kernel-args",
                            help="Additional argument to pass to the installation kernel")

    parser.add_argument("--timeout", default=None, type=int,
                        help="Cancel installer after X minutes")

    return parser


def main():
    parser = create_parser()
    opts = parser.parse_args()

    vc = VirtualConfiguration(opts.iso, opts.ks)
    vc.disk_paths = opts.disk_paths
    vc.networks = opts.nics
    vc.proxy = opts.proxy
    vc.location = opts.location
    vc.boot_image = opts.boot
    vc.log_path = opts.logfile
    vc.temp_dir = opts.tmp
    vc.keep_image = opts.keep_image
    vc.ram = opts.ram
    vc.vnc = opts.vnc
    vc.kernel_args = opts.kernel_args
    vc.timeout = opts.timeout

    vm = VirtualManager(vc)

    if vm.run():
        sys.exit(0)
    else:
        sys.exit(1)


if __name__ == '__main__':
    main()
