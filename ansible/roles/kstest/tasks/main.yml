---

### Install required packages

- name: Update all packages
  dnf:
    name: "*"
    state: latest

- name: Install required groups
  dnf:
    name:
      - "@virtualization"
      - libusbx
    state: latest

- name: Install packages
  dnf:
    name:
      - git
      - libselinux-python
      - NetworkManager
      - lorax-lmc-virt # kstests livemedia-creator
      - openssh-clients # kstests scp
      - parallel # kstests
      - python3-libvirt # kstests
      - libguestfs-tools # kstests
      - vim
      - rsync
    state: latest

- name: Install kernel-modules (reboot if updated)
  dnf:
    name: "kernel-modules"
    state: present
  notify:
    - Reboot machine

### Create kstests user which can sudo without password

- name: Create {{ kstest_remote_user }} user
  user:
    name: "{{ kstest_remote_user }}"

- name: Create {{ kstest_remote_user }} .ssh dir
  file:
    path: /home/{{ kstest_remote_user}}/.ssh
    state: directory
    owner: "{{ kstest_remote_user }}"
    group: "{{ kstest_remote_user }}"
    mode: 0700

- name: Disable lecture message from sudo
  copy:
    src: files/sudoers.d.lecture
    dest: /etc/sudoers.d/lecture
    owner: root
    group: root
    mode: 0440

- name: Make sure there is a 'wheel' group
  group:
    name: wheel
    state: present

- name: Allow 'wheel' group to have passwordless sudo
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^%wheel'
    line: '%wheel ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'

- name: Add kstest to wheel group
  user:
    name: "{{ kstest_remote_user }}"
    groups: wheel
    append: yes

- name: Add authorized key for running remote tests
  authorized_key:
    user: "{{ kstest_remote_user }}"
    key: "{{ lookup('file', item) }}"
  with_fileglob:
    - "files/authorized_keys/*"
  tags:
    - ssh-keys

- name: Add authorized key to root for Vritual Manager
  authorized_key:
    user: root
    key: "{{ lookup('file', item) }}"
  with_fileglob:
    - "files/authorized_keys/*"
  tags:
    - ssh-keys

- name: Indicate successful deployment by a drop file
  copy:
    content: ""
    dest: "{{ kstest_successful_deployment_file_path }}"
    force: no
    owner: "{{ kstest_remote_user }}"
    group: "{{ kstest_remote_user }}"

### This is probably not required but we like NM

- name: Enable NetworkManager service
  service:
    name: NetworkManager
    enabled: yes
  notify:
    - Reboot machine

- name: Collect facts about system services
  service_facts:
  register: services_state

# This would happen on Fedora 28 cloud image. F29 does not have network service.
- name: Disable network service if needed
  service:
    name: network
    enabled: no
  notify:
    - Reboot machine
  when: services_state.ansible_facts.services["network.service"] is defined
