#test name: module-install
#
# generic module install test:
# - enable one module with a stream
# - install the same module with a different stream
#
# expected result for this stream missmatch
# - stream id from module command is used
# - module spec in packages section is ignored if it specifies a different stream id
#
# This test is basically checking the current behavior holds that we can catch any changes,
# both intended and unintended.

%ksappend repos/default.ks
%ksappend common/common_no_payload.ks

module --name=cri-o --stream=2018.0

%packages
@^Fedora Server Edition
@cri-o:1.11/default
kernel
vim
%end

%post
# modules have some packages defined as their API in their profiles,
# we can check for those to be (or not to be installed) to see if the
# module has (or has not) been installed

# the vim standalone package
rpm -q vim-minimal
if [[ $? != 0 ]]; then
    echo '*** vim-minimal package requested but not installed' >> /root/RESULT
fi

# it is also nice to have kernel
rpm -q kernel
if [[ $? != 0 ]]; then
    echo '*** kernel package not installed' >> /root/RESULT
fi

# module should be just enabled due to the miss-match
rpm -q cri-o
if [[ $? != 0 ]]; then
    echo '*** cri-o package for cri-o module should be installed' >> /root/RESULT
fi

# next we will check if the module is seen as enabled/installed from the
# metadata/DNF point of view
dnf module list --enabled cri-o | grep cri-o || echo "*** cri-o module not marked as enabled" >> /root/RESULT
dnf module list --installed cri-o | grep cri-o || echo "*** cri-o module not marked as installed" >> /root/RESULT

# check the stream
dnf module list --enabled cri-o | grep "2018.0 \[e\]" || echo "*** cri-o stream id 2018.0 not marked as enabled (stream id from packages section should win)" >> /root/RESULT

if [ ! -f /root/RESULT ]
then
    # no result file (no errors) -> success
    echo SUCCESS > /root/RESULT
else
    # some errors happened
    exit 1
fi

%end
